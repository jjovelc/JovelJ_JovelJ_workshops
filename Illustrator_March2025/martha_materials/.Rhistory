length(gp_mod$ID)
length(unique(gp_mod$ID))
# define as compareClusterResult object
gp_mod_cluster = new("compareClusterResult", compareClusterResult = gp_mod)
# define as enrichResult object
gp_mod_enrich = new("enrichResult", result = gp_mod)
enrichplot::dotplot(gp_mod_cluster)
barplot(gp_mod_enrich, showCategory = 40, font.size = 16) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler_tutorial_plotting.R", echo=TRUE)
# define as compareClusterResult object
gp_mod_cluster = new("compareClusterResult", compareClusterResult = gp_mod)
# define as enrichResult object
gp_mod_enrich = new("enrichResult", result = gp_mod)
enrichplot::dotplot(gp_mod_cluster)
barplot(gp_mod_enrich, showCategory = 40, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
row.names(gp_mod) = unique(gp_mod$ID)
row.names(gp_mod[1:89]) = unique(gp_mod$ID)
gp_mod
row.names(gp_mod)
row.names(gp_mod[1])
row.names(gp_mod)[1:10]
row.names(gp_mod)[1:89] = unique(gp_mod$ID)
# define as compareClusterResult object
gp_mod_cluster = new("compareClusterResult", compareClusterResult = gp_mod)
# define as enrichResult object
gp_mod_enrich = new("enrichResult", result = gp_mod)
enrichplot::dotplot(gp_mod_cluster)
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
# Assuming `gostres$result` is your results data frame
results <- gostres$result
# Modify the g:Profiler data frame
gp_mod <- results[, c('query', 'source', 'term_id', 'term_name', 'p_value', 'query_size',
'intersection_size', 'term_size', 'effective_domain_size', 'intersection')]
head(results)
colnames(results)
# Assuming `gostres$result` is your results data frame
results <- gostres$result
# Modify the g:Profiler data frame
gp_mod <- results[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod$GeneRatio <- paste0(gp_mod$intersection_size, "/", gp_mod$query_size)
gp_mod$BgRatio <- paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)
# Assume intersection contains actual gene IDs separated by commas
# We will need to convert this column if it exists or add a mock one for demonstration
# Here, adding a mock 'intersection' column for demonstration (replace with actual data if available)
gp_mod$intersection <- c("GENE1,GENE2,GENE3", "GENE4,GENE5", "GENE6,GENE7,GENE8", "GENE9,GENE10")
# Rename columns to match enrichResult expectations
names(gp_mod) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Convert `geneID` to the correct format
gp_mod$geneID <- gsub(",", "/", gp_mod$geneID)
# Ensure row names are unique and set as `ID`
row.names(gp_mod) <- gp_mod$ID
# Create geneSets based on your results
geneSets <- setNames(lapply(strsplit(gp_mod$geneID, "/"), unique), gp_mod$ID)
# Define as compareClusterResult object
gp_mod_cluster <- new("compareClusterResult", compareClusterResult = gp_mod)
# Define as enrichResult object
gp_mod_enrich <- new("enrichResult", result = gp_mod)
# Generate and plot the dotplot
dotplot(gp_mod_cluster, showCategory = 10, font.size = 12)
# Generate and plot the barplot
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
gostres_up = gost(query = gene_list_up,
organism = "ggallus")
up_infile  <- 'oviduct_ctrl_vs_DMV_11dpi_q0.05_FC2_up.tsv'
down_infile  <- 'oviduct_ctrl_vs_DMV_11dpi_q0.05_FC2_down.tsv'
genes_up        <- read.table(up_infile, header = T)
gene_list_up   <- as.list(genes_up)
genes_down        <- read.table(down_infile, header = T)
gene_list_down   <- as.list(genes_down)
gostres_up = gost(query = gene_list_up,
organism = "ggallus")
gostres_down = gost(query = gene_list_down,
organism = "ggallus")
gostplot(gostres_up)
gostplot(gostres_down)
gostres_up$result
gostres_down$result
library(clusterProfiler)
library(enrichplot)
library(DOSE)
# Assuming `gostres$result` is your results data frame
results_up   <- gostres_up$result
results_down <- gostres_down$result
gp_mod_down <- results_down[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod_up$GeneRatio <- paste0(gp_mod_up$intersection_size, "/", gp_mod_up$query_size)
# Modify the g:Profiler data frame
gp_mod_up <- results_up[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
gp_mod_down <- results_down[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod_up$GeneRatio <- paste0(gp_mod_up$intersection_size, "/", gp_mod_up$query_size)
gp_mod_up$BgRatio <- paste0(gp_mod_up$term_size, "/", gp_mod_up$effective_domain_size)
gp_mod_down$GeneRatio <- paste0(gp_mod_down$intersection_size, "/", gp_mod_down$query_size)
gp_mod_down$BgRatio <- paste0(gp_mod_down$term_size, "/", gp_mod_down$effective_domain_size)
gp_mod$intersection
# Rename columns to match enrichResult expectations
names(gp_mod_up) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Create GeneRatio and BgRatio
gp_mod_up$GeneRatio <- paste0(gp_mod_up$intersection_size, "/", gp_mod_up$query_size)
gp_mod_up$BgRatio <- paste0(gp_mod_up$term_size, "/", gp_mod_up$effective_domain_size)
gp_mod_down$GeneRatio <- paste0(gp_mod_down$intersection_size, "/", gp_mod_down$query_size)
gp_mod_down$BgRatio <- paste0(gp_mod_down$term_size, "/", gp_mod_down$effective_domain_size)
# Rename columns to match enrichResult expectations
names(gp_mod_up) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Assuming `gostres$result` is your results data frame
results_up   <- gostres_up$result
results_down <- gostres_down$result
# Modify the g:Profiler data frame
gp_mod_up <- results_up[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
gp_mod_down <- results_down[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod_up$GeneRatio <- paste0(gp_mod_up$intersection_size, "/", gp_mod_up$query_size)
gp_mod_up$BgRatio <- paste0(gp_mod_up$term_size, "/", gp_mod_up$effective_domain_size)
gp_mod_down$GeneRatio <- paste0(gp_mod_down$intersection_size, "/", gp_mod_down$query_size)
gp_mod_down$BgRatio <- paste0(gp_mod_down$term_size, "/", gp_mod_down$effective_domain_size)
# Rename columns to match enrichResult expectations
names(gp_mod_up) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
names(gp_mod_down) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Assume intersection contains actual gene IDs separated by commas
# We will need to convert this column if it exists or add a mock one for demonstration
# Here, adding a mock 'intersection' column for demonstration (replace with actual data if available)
gp_mod_up$intersection <- c("GENE1,GENE2,GENE3", "GENE4,GENE5", "GENE6,GENE7,GENE8", "GENE9,GENE10")
# Rename columns to match enrichResult expectations
names(gp_mod_up) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
gp_mod_down$intersection <- c("GENE1,GENE2,GENE3", "GENE4,GENE5", "GENE6,GENE7,GENE8", "GENE9,GENE10")
names(gp_mod_down) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Convert `geneID` to the correct format
gp_mod_up$geneID <- gsub(",", "/", gp_mod_up$geneID)
gp_mod_down$geneID <- gsub(",", "/", gp_mod_down$geneID)
# Ensure row names are unique and set as `ID`
row.names(gp_mod_up) <- gp_mod_up$ID
# Ensure row names are unique and set as `ID`
row.names(gp_mod_up) <- gp_mod_up$ID
row.names(gp_mod_down) <- gp_mod_down$ID
geneSets <- setNames(lapply(strsplit(gp_mod_down$geneID, "/"), unique), gp_mod_down$ID)
# Define as compareClusterResult object
gp_mod_cluster_up <- new("compareClusterResult", compareClusterResult = gp_mod_up)
gp_mod_cluster_down <- new("compareClusterResult", compareClusterResult = gp_mod_down)
# Define as enrichResult object
gp_mod_enrich_up <- new("enrichResult", result = gp_mod_up)
# Generate and plot the dotplot
dotplot(gp_mod_cluster_up, showCategory = 10, font.size = 12)
# Assuming `gostres$result` is your results data frame
results <- gostres$result
# Modify the g:Profiler data frame
gp_mod <- results[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod$GeneRatio <- paste0(gp_mod$intersection_size, "/", gp_mod$query_size)
gp_mod$BgRatio <- paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)
# Assume intersection contains actual gene IDs separated by commas
# We will need to convert this column if it exists or add a mock one for demonstration
# Here, adding a mock 'intersection' column for demonstration (replace with actual data if available)
gp_mod$intersection <- c("GENE1,GENE2,GENE3", "GENE4,GENE5", "GENE6,GENE7,GENE8", "GENE9,GENE10")
# Rename columns to match enrichResult expectations
names(gp_mod) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# Convert `geneID` to the correct format
gp_mod$geneID <- gsub(",", "/", gp_mod$geneID)
# Ensure row names are unique and set as `ID`
row.names(gp_mod) <- gp_mod$ID
# Create geneSets based on your results
geneSets <- setNames(lapply(strsplit(gp_mod$geneID, "/"), unique), gp_mod$ID)
# Define as compareClusterResult object
gp_mod_cluster <- new("compareClusterResult", compareClusterResult = gp_mod)
# Define as enrichResult object
gp_mod_enrich <- new("enrichResult", result = gp_mod)
# Generate and plot the dotplot
dotplot(gp_mod_cluster, showCategory = 10, font.size = 12)
# Generate and plot the barplot
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
# Generate and plot the dotplot
dotplot(gp_mod_cluster, showCategory = 10, font.size = 12)
# Assuming `gostres$result` is your results data frame
results <- gostres$result
up_names = gconvert(row.names(genes_up))
?gconvert
up_names = gconvert(row.names(up), organism = "ggallus")
up_names = gconvert(row.names(genes_up), organism = "ggallus")
# Extract gene lists
gene_list_up <- genes_up$transcript  # assuming the column with gene IDs is named 'transcript'
gene_list_down <- genes_down$transcript  # assuming the column with gene IDs is named 'transcript'
# Perform gProfiler2 enrichment analysis
gostres_up <- gost(query = gene_list_up, organism = "ggallus")
gostres_down <- gost(query = gene_list_down, organism = "ggallus")
# Combine results for up and down genes into a single data frame
results_up <- gostres_up$result
results_up$query <- "upregulated"
results_down <- gostres_down$result
results_down$query <- "downregulated"
combined_results <- rbind(results_up, results_down)
# Modify the combined g:Profiler data frame
gp_mod <- combined_results[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size', 'intersection')]
colnames(combined_results)
# Load necessary libraries
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(gprofiler2)
# Set working directory
setwd('/Users/juanjovel/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology')
# Input files for upregulated and downregulated genes
up_infile  <- 'oviduct_ctrl_vs_DMV_11dpi_q0.05_FC2_up.tsv'
down_infile  <- 'oviduct_ctrl_vs_DMV_11dpi_q0.05_FC2_down.tsv'
# Read upregulated and downregulated genes
genes_up <- read.table(up_infile, header = TRUE)
genes_down <- read.table(down_infile, header = TRUE)
# Extract gene lists
gene_list_up <- genes_up$transcript  # assuming the column with gene IDs is named 'transcript'
gene_list_down <- genes_down$transcript  # assuming the column with gene IDs is named 'transcript'
# Perform gProfiler2 enrichment analysis
gostres_up <- gost(query = gene_list_up, organism = "ggallus")
gostres_down <- gost(query = gene_list_down, organism = "ggallus")
# Combine results for up and down genes into a single data frame
results_up <- gostres_up$result
results_up$query <- "upregulated"
results_down <- gostres_down$result
results_down$query <- "downregulated"
combined_results <- rbind(results_up, results_down)
# Modify the combined g:Profiler data frame
gp_mod <- combined_results[, c('query', 'source', 'term_id', 'term_name', 'p_value',
'query_size', 'intersection_size', 'term_size',
'effective_domain_size')]
# Create GeneRatio and BgRatio
gp_mod$GeneRatio <- paste0(gp_mod$intersection_size, "/", gp_mod$query_size)
gp_mod$BgRatio <- paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)
# Rename columns to match enrichResult expectations
names(gp_mod) <- c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"GeneRatio", "BgRatio")
# Assume intersection contains actual gene IDs separated by commas
# For now, we'll add a mock 'geneID' column for demonstration (replace with actual data if available)
gp_mod$geneID <- c("GENE1/GENE2/GENE3", "GENE4/GENE5", "GENE6/GENE7/GENE8", "GENE9/GENE10")
# Ensure row names are unique and set as `ID`
row.names(gp_mod) <- gp_mod$ID
# Create geneSets based on your results
geneSets <- setNames(lapply(strsplit(gp_mod$geneID, "/"), unique), gp_mod$ID)
# Define as compareClusterResult object
gp_mod_cluster <- new("compareClusterResult", compareClusterResult = gp_mod)
# Define as enrichResult object
gp_mod_enrich <- new("enrichResult", result = gp_mod)
# Generate and plot the dotplot
dotplot(gp_mod_cluster, showCategory = 10, font.size = 12)
# Generate and plot the barplot
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
up_outfile <- gsub(".txt", "_GOenrich.txt", up_infile)
down_outfile <- gsub(".txt", "_GOenrich.txt", down_infile)
write.table(results_up, up_outfile, sep='\t', quote = F)
class(results_up)
up_outfile <- gsub(".txt", "_GOenrich.txt", up_infile)
down_outfile <- gsub(".txt", "_GOenrich.txt", down_infile)
write.table(results_up, up_outfile, sep='\t', quote = F)
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
results_up
# Get results
results_up <- gostres_up$result
results_up
# Perform gProfiler2 enrichment analysis
gostres_up <- gost(query = gene_list_up, organism = "ggallus")
source("~/jj/data_analysis/mohammad_saleh/mRNA/analysis_240516_wLFC-shrinkage/DE_w_ashr_LFCshrinkage/gProfiler2_gene_ontology/gProfiler2.R", echo=TRUE)
library(DESeq2)
library(airway)
library(gprofiler2)
# load the airway data
data(airway)
# construct the DESeqDataSet object
ddsMat = DESeqDataSetFromMatrix(countData = assay(airway),
colData = colData(airway),
design = ~ cell + dex)
# run DESeq2 pipeline
dds = DESeq(ddsMat)
# get the results
results = results(dds, contrast = c("dex", "trt", "untrt"),
alpha = 0.05, lfcThreshold = 1)
# keep only the significant genes
results_sig = subset(results, padj < 0.05)
# get the significant up-regulated genes
up = subset(results_sig, log2FoldChange > 0)
# get the significant down-regulated genes
down = subset(results_sig, log2FoldChange < 0)
# enrichment analysis
gp_up = gost(row.names(up), organism = "hsapiens")
gp_down = gost(row.names(down), organism = "hsapiens")
# loading the additional packages
library(clusterProfiler)
library(enrichplot)
library(DOSE) # needed to convert to enrichResult object
up_names = gconvert(row.names(up))
down_names = gconvert(row.names(down))
# enrichment analysis using gene names
multi_gp = gost(list("up-regulated" = up_names$name,
"down-regulated" = down_names$name), multi_query = FALSE, evcodes = TRUE)
# modify the g:Profiler data frame
gp_mod = multi_gp$result[,c('query', 'source', 'term_id',
'term_name', 'p_value', 'query_size',
'intersection_size', 'term_size',
'effective_domain_size', 'intersection')]
gp_mod$GeneRatio = paste0(gp_mod$intersection_size, "/", gp_mod$query_size)
gp_mod$BgRatio = paste0(gp_mod$term_size, "/", gp_mod$effective_domain_size)
names(gp_mod) = c("Cluster", "Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
gp_mod$geneID = gsub(",", "/", gp_mod$geneID)
row.names(gp_mod)[1:89] = unique(gp_mod$ID)
# define as compareClusterResult object
gp_mod_cluster = new("compareClusterResult", compareClusterResult = gp_mod)
# define as enrichResult object
gp_mod_enrich = new("enrichResult", result = gp_mod)
enrichplot::dotplot(gp_mod_cluster)
barplot(gp_mod_enrich, showCategory = 20, font.size = 10) +
ggplot2::facet_grid(~Cluster) +
ggplot2::ylab("Intersection size")
library(enrichplot)
library(DOSE)
library(ggplot2)
library(GOfuncR)
library(RColorBrewer)
# Set working directory for files
setwd("/Users/juanjovel/OneDrive/jj/UofC/data_analysis/coltonUnger/DE_analysis/mm10_plus_RNAspades_assembly/apeglm_shrinkage_240521/geneOntology")
# Import gProfiler results
infile <- 'LS1Tib_down_GOenrich.txt'
outfile <- gsub(".txt", "_reformated.txt", infile)
res <- read.table(infile, sep = '\t', header = T)
# Change adjust_p_value to 2 decimal places
res$p_value <- signif(res$p_value, digits = 3)
# Select only fields of interest
res <- res[c("source", "term_id", "term_name", "p_value", "query_size",
"intersection_size", "term_size", "effective_domain_size", "parents")]
res$GeneRatio = paste0(res$intersection_size,  "/", res$query_size)
res$BgRatio = paste0(res$term_size, "/", res$effective_domain_size)
# Rename columns
names(res) = c("Category", "ID", "Description", "p.adjust",
"query_size", "Count", "term_size", "effective_domain_size",
"geneID", "GeneRatio", "BgRatio")
# define as enrichResult object
res_enrich  = new("enrichResult", result = res)
# OPTIONAL
# Write .csv file with all GO info
write.csv(res_enrich, outfile)
pal1 <- colorRampPalette(c("red","white", "blue"))(n = 299)
# Create and save dotplot
plot <- dotplot(res_enrich, x = "GeneRatio",
color = "p.adjust",
showCategory = 10, size = NULL, split = NULL,
font.size = 12) +
# If no palette is specified, it will default to the usual re-blue
# To use standard palettes uncomment next two lines
scale_fill_distiller(palette = "Spectral") +
scale_color_distiller(palette = "Spectral")
# Print the plot
print(plot)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/barplots_average_wStdev/make_barPlot_wStDev.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/barplots_average_wStdev/make_barPlot_wStDev.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/barplots_average_wStdev/make_barPlot_wStDev.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/barplots_average_wStdev/make_barPlot_wStDev.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_upregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_downregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_deregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps/make_heatmap_deregulated.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
cor(data_t)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/make_PCA.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/compare_control_vs_infected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/barPlots_control_vs_virus.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/barPlots_control_vs_virus.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/barPlots_control_vs_virus.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/barPlots_control_vs_virus.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/mean_stdev_strongest.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/data_analysis/sufnaMohamed/assembly_ind_and_comb/kallisto_quants/blast_filtering/DESeq2_analysis/heatmaps_PCAs/mean_stdev_strongest.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
# Alternative approach for Illustrator-friendly SVG files
library(gapminder)
library(ggplot2)
library(svglite)
setwd('/Users/juanjovel/OneDrive/jj/UofC/git_repos/courses/Illustrator_March2025/figures')
# Create a basic plot with minimal styling
violin_plot <- ggplot(gapminder, aes(x = continent, y = lifeExp, fill = continent)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.1, fill = "white") +
labs(title = "Life Expectancy by Continent",
x = "Continent",
y = "Life Expectancy (years)") +
theme_bw() # Use simpler theme
# Save with specific SVG parameters
svglite("violin_plot_illustrator_friendly.svg",
width = 8,
height = 6,
system_fonts = list(sans = "Arial"), # Use common font
pointsize = 12,
standalone = TRUE)
print(violin_plot)
dev.off()
# Try a different SVG engine that might be more Illustrator-friendly
library(svglite)
# Explicitly disable clipping in ggplot2
violin_plot <- ggplot(gapminder, aes(x = continent, y = lifeExp, fill = continent)) +
geom_violin(trim = FALSE) +
coord_cartesian(clip = "off") +  # This disables clipping
theme_minimal() +
theme(legend.position = "none")
# Save with specific SVG parameters
svglite("violin_plot_no_clip.svg",
width = 8,
height = 6,
scaling = 1,     # No scaling
always_quote = TRUE,  # Quote attributes for better compatibility
fix_text_size = TRUE)  # Standardize text sizing
# Save with specific SVG parameters
svglite("violin_plot_no_clip.svg",
width = 8,
height = 6,
scaling = 1,     # No scaling
fix_text_size = TRUE)  # Standardize text sizing
print(violin_plot)
dev.off()
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityofCalgary/jj/UofC/git_repos/jj/courses/Illustrator_March2025/figures/generate_SVG_plots.R", echo=TRUE)
