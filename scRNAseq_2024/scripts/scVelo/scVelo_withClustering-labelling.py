import numpy as np
import pandas as pd
import scanpy as sc
import anndata
import scvelo as scv
import matplotlib
import scipy
from pyroe import load_fry
import os
import scipy.sparse
from celltypist import models, annotate  # Import CellTypist


# process the count matrix generated by alevin-fry
frydir = "pbmc_splici_quant_res"
e2n_path = "t2g.txt"
adata = load_fry(frydir, output_format="velocity")

# Load the transcript-to-gene mapping
e2n = dict([l.rstrip().split() for l in open(e2n_path).readlines()])

# Map gene IDs to gene names, using fallback for missing keys
adata.var_names = [e2n.get(e, e) for e in adata.var_names]  # Use original gene ID if missing

# Ensure gene names are unique
adata.var_names_make_unique()

# Dimensionality reduction (PCA, UMAP)
sc.tl.pca(adata)
sc.pp.neighbors(adata)
sc.tl.tsne(adata)
sc.tl.umap(adata, n_components=2)
# Ensure normalization and log transformation
sc.pp.normalize_total(adata, target_sum=1e4)  # Normalize counts per cell to 10,000
sc.pp.log1p(adata)  # Log-transform the data
# Clustering (Leiden algorithm)
sc.tl.leiden(adata, resolution=0.5)  # Adjust resolution for granularity

# Save UMAP plot with clusters
sc.pl.umap(adata, color="leiden", save="_clusters.png")

# Annotate cell types using CellTypist
print("Annotating cell types with CellTypist...")
# Load the model
model_path = "/home/juan.jovel/.celltypist/data/models/Immune_All_Low.pkl"
model = models.Model.load(model = model_path)
predictions = annotate(adata, model)
adata.obs["cell_types"] = predictions.predicted_labels  # Add predicted cell types to AnnData

# Save UMAP with annotated cell types
sc.pl.umap(adata, color="cell_types", save="_cell_types.png")

# housekeeping
matplotlib.use('AGG')
scv.settings.set_figure_params('scvelo')

# get the proportion of spliced and unspliced count
scv.utils.show_proportions(adata)

# filter cells and genes, then normalize expression values
scv.pp.filter_and_normalize(adata, min_shared_counts=20, n_top_genes=2000, enforce=True)

# scVelo pipeline
scv.pp.moments(adata, n_pcs=30, n_neighbors=30)
scv.tl.recover_dynamics(adata, n_jobs=11)
scv.tl.velocity(adata, mode='dynamical')
scv.tl.velocity_graph(adata)

# Save the processed AnnData object
adata.write('pbmc_full_dim_scvelo.h5ad', compression='gzip')

# Overlay RNA velocity on UMAP, colored by cell types
scv.pl.velocity_embedding_stream(
    adata,
    basis="umap",
    color="cell_types",
    save="pbmc_velocity_stream_cell_types_defaults.png",
    legend_fontsize=6,
    facecolor="white", 
    fontsize=6  # Adjust fontsize (default is larger, reduce for smaller labels)
)

# Labels on a legend
scv.pl.velocity_embedding_stream(
    adata,
    basis="umap",
    color="cell_types",
    save="pbmc_velocity_stream_cell_types_wLegend.png",
    legend_loc='on data',  # Place labels as a legend
    fontsize=6,
    facecolor="white", 
    legend_fontsize=6
)

# Labels outside plot
scv.pl.velocity_embedding_stream(
    adata,
    basis="umap",
    color="cell_types",
    save="pbmc_velocity_stream_cell_types_namesOutside.png",
    legend_loc="right margin",  # Move legend to the right
    legend_fontsize=6,
    facecolor="white", 
    fontsize=6
)

# Adjust transparency
scv.pl.velocity_embedding_stream(
    adata,
    basis="umap",
    color="cell_types",
    save="pbmc_velocity_stream_cell_types_transparencyAdjusted.png",
    fontsize=6,
    legend_fontsize=6,
    facecolor="white", 
    alpha=0.7  # Reduce opacity for clarity
)
